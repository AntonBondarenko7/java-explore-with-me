{
  "info": {
    "_postman_id": "c3a79f53-263f-44d7-b463-184c787d8fa7",
    "name": "comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27037734"
  },
  "item": [
    {
      "name": "create comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 201\", function () {",
              "  pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"The 'id' field is a non-zero positive integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.id).to.be.a('number');",
              "    pm.expect(responseData.id).to.be.above(0, \"Value should be a non-zero positive integer\");",
              "});",
              "",
              "",
              "pm.test(\"Validate authorId is a non-zero positive integer\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.authorId).to.be.a('number');",
              "  pm.expect(responseData.authorId).to.be.above(0, \"authorId should be a positive number\");",
              "});",
              "",
              "",
              "pm.test(\"Validate the text field is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'createdOn' field is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.createdOn).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"текст комментария 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/events/2/comments/",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "events",
            "2",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "create comment event not exist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 404', function () {",
              "    pm.response.to.have.status(404);",
              "})",
              "",
              "pm.test('Response has the required fields - status, reason, message, timestamp, errors', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.property('status');",
              "    pm.expect(responseData).to.have.property('reason');",
              "    pm.expect(responseData).to.have.property('message');",
              "    pm.expect(responseData).to.have.property('timestamp');",
              "    pm.expect(responseData).to.have.property('errors');",
              "})",
              "",
              "pm.test('Errors array is not empty', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.errors).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, 'Errors array should not be empty');",
              "})",
              "",
              "pm.test('Response time is less than 500ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"текст комментария 1\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/events/9999/comments/",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "events",
            "9999",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "create comment user not exist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 404', function () {",
              "    pm.expect(pm.response.code).to.equal(404);",
              "})",
              "",
              "pm.test('Response has the required fields - status, reason, message, timestamp, and errors', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.status).to.exist;",
              "    pm.expect(responseData.reason).to.exist;",
              "    pm.expect(responseData.message).to.exist;",
              "    pm.expect(responseData.timestamp).to.exist;",
              "    pm.expect(responseData.errors).to.exist;",
              "})",
              "",
              "pm.test('Errors array is not empty', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;",
              "})",
              "",
              "pm.test('Message field is a non-empty string', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"текст комментария 2\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/9999/events/2/comments/",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "9999",
            "events",
            "2",
            "comments",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "get comments to moderate by admin one comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the response is an array\", function () {",
              "  pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "",
              "pm.test(\"Check id and authorId are non-negative integers\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    responseData.forEach(function(comment) {",
              "        pm.expect(comment.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
              "        pm.expect(comment.authorId).to.be.a('number').and.to.be.at.least(0, \"authorId should be a non-negative integer\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'text' is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    ",
              "    responseData.forEach(function(comment) {",
              "        pm.expect(comment.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "    });",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/events/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Validate that the \\'id\\' field is a non-zero integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.id).to.be.a('number');",
              "    pm.expect(responseData.id).to.not.equal(0);",
              "})",
              "",
              "pm.test('Validate that the \\'authorId\\' field is a non-zero integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.authorId).to.be.a('number');",
              "    pm.expect(responseData.authorId).to.not.equal(0);",
              "})",
              "",
              "pm.test('The \\'text\\' field is a non-empty string', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновлено админом\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by admin comment not exist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'status' field is not empty\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
              "});",
              "",
              "",
              "pm.test(\"Reason field should not be empty\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.reason).to.exist.and.to.have.lengthOf.at.least(1, \"Reason field should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'message' field is not empty\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
              "});",
              "",
              "",
              "pm.test(\"Validate that the 'errors' array is present and not empty\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.errors).to.exist.and.to.be.an('array');",
              "    pm.expect(responseData.errors).to.have.lengthOf.at.least(1, \"Array should not be empty\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": null\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/comments/9999",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "comments",
            "9999"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate id field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
              "});",
              "",
              "pm.test(\"Validate authorId field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.authorId).to.exist.and.to.be.a('number');",
              "});",
              "",
              "pm.test(\"Verify that id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"id should be a non-negative integer\");",
              "});",
              "",
              "pm.test(\"Text is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/events/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "events",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by user comment not exist",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 404\", function () {",
              "    pm.expect(pm.response.code).to.equal(404);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'status' field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.status).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'reason' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.reason).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'message' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'timestamp' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.timestamp).to.exist;",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/1/events/comments/9999",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "events",
            "comments",
            "9999"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by wrong user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 400\", function () {",
              "    pm.expect(pm.response.code).to.equal(400);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'status' field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.status).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'reason' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.reason).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'message' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'timestamp' field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.timestamp).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Обновленный комментарий\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/2/events/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "2",
            "events",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "get event no comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"The id field should be a non-negative integer\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.id).to.be.a('number');",
              "  pm.expect(responseData.id).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"The annotation field should be a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.annotation).to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"The category field is an object with id and name fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.category).to.be.an('object');",
              "  pm.expect(responseData.category.id).to.exist.and.to.be.a('number');",
              "  pm.expect(responseData.category.name).to.exist.and.to.be.a('string');",
              "});pm.test(\"The comments array should be empty\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.comments).to.be.an('array');",
              "    pm.expect(responseData.comments).to.have.lengthOf(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/3/events/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "3",
            "events",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "update comment by admin text is null",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Validate that the \\'id\\' field is a non-zero integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.id).to.be.a('number');",
              "    pm.expect(responseData.id).to.not.equal(0);",
              "})",
              "",
              "pm.test('Validate that the \\'authorId\\' field is a non-zero integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.authorId).to.be.a('number');",
              "    pm.expect(responseData.authorId).to.not.equal(0);",
              "})",
              "",
              "pm.test('The \\'text\\' field is a non-empty string', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": null\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/events/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "get comments to moderate by admin no comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response is an array\", function () {",
              "  pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "",
              "pm.test(\"Response array is empty\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array').that.is.empty;",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the response includes the required fields for each comment\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(comment) {",
              "        pm.expect(comment).to.have.property('commentID');",
              "        pm.expect(comment).to.have.property('author');",
              "        pm.expect(comment).to.have.property('content');",
              "        pm.expect(comment).to.have.property('timestamp');",
              "    });",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/events/comments",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "get event with comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the id field\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
              "});",
              "",
              "pm.test(\"Validate the annotation field\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.annotation).to.exist.and.to.be.a('string');",
              "});",
              "",
              "pm.test(\"Verify that id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.id).to.be.a('number');",
              "    pm.expect(responseData.id).to.be.at.least(0);",
              "});",
              "",
              "pm.test(\"Verify that category id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.category.id).to.be.a('number');",
              "    pm.expect(responseData.category.id).to.be.at.least(0);",
              "});",
              "",
              "pm.test(\"Verify that the annotation is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.annotation).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "pm.test(\"Verify that the description is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "pm.test(\"Verify that the eventDate exists in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.eventDate).to.exist;",
              "});pm.test(\"Verify that the comments array exists and contains one comment\", function () {",
              "    const responseData = pm.response.json();",
              "  ",
              "    pm.expect(responseData.comments).to.exist.and.to.be.an('array').and.to.have.lengthOf(1, \"Comments array should have one comment\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/3/events/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "3",
            "events",
            "2"
          ]
        }
      },
      "response": []
    },
    {
      "name": "delete comment",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response body is a boolean value\", function () {",
              "  pm.expect(pm.response.json()).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Validate that the response body is true\", function () {",
              "    pm.expect(pm.response.text()).to.equal(\"true\");",
              "});",
              "",
              "",
              "pm.test(\"Response time is within acceptable range\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the comment is successfully deleted from the event\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/1/events/comments/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "1",
            "events",
            "comments",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "get event no comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"The id field should be a non-negative integer\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.id).to.be.a('number');",
              "  pm.expect(responseData.id).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"The annotation field should be a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.annotation).to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"The category field is an object with id and name fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.category).to.be.an('object');",
              "  pm.expect(responseData.category.id).to.exist.and.to.be.a('number');",
              "  pm.expect(responseData.category.name).to.exist.and.to.be.a('string');",
              "});pm.test(\"The comments field should be an empty array\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.comments).to.be.an('array');",
              "  pm.expect(responseData.comments.length).to.equal(0);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/3/events/2",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "3",
            "events",
            "2"
          ]
        }
      },
      "response": []
    }
  ]
}